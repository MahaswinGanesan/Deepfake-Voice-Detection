# -*- coding: utf-8 -*-
"""feature_extraction_sample.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E-LSx270YXjRWmXwdM45MWLfbkbjg9IK
"""

import os
import librosa
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import drive, files

# Mount Google Drive
drive.mount('/content/drive')

# Set up directory paths
real_audio_dir = '/content/drive/MyDrive/cleaned_real_2000/'
fake_audio_dir = '/content/drive/MyDrive/cleaned_fake_2000/'

# Separate output directories
real_output_dir = '/content/drive/MyDrive/extracted_real_features_2000/'
fake_output_dir = '/content/drive/MyDrive/extracted_fake_features_2000/'
os.makedirs(real_output_dir, exist_ok=True)
os.makedirs(fake_output_dir, exist_ok=True)

# Load protocol metadata
def load_protocol(protocol_file, names, sep=' ', index_col=None, usecols=None):
    pd_protocol = pd.read_csv(
        protocol_file,
        sep=sep,
        names=names,
        usecols=usecols,
        index_col=index_col,
        skipinitialspace=True
    )
    return pd_protocol

names_cross = ['speaker', 'trial', 'compr', 'source', 'attack', 'label']
file_eval_cross = '/content/drive/MyDrive/trial_metadata.txt'
eval_df = load_protocol(file_eval_cross, names=names_cross, index_col='trial', usecols=[0, 1, 2, 3, 4, 5])

# Feature extraction function
def extract_features(audio_path, sr=16000, n_mfcc=40, n_fft=2048, hop_length=512):
    y, sr = librosa.load(audio_path, sr=sr)

    duration = librosa.get_duration(y=y, sr=sr)
    mean_amp = np.mean(np.abs(y))
    max_amp = np.max(np.abs(y))
    silence_ratio = np.sum(np.abs(y) < 0.01) / len(y) * 100

    mel_spec = librosa.feature.melspectrogram(y=y, sr=sr, n_fft=n_fft, hop_length=hop_length)
    log_power_spec = librosa.power_to_db(mel_spec, ref=np.max)

    mean_mel_spec = np.mean(mel_spec)
    var_mel_spec = np.var(mel_spec)

    mean_log_spec = np.mean(log_power_spec)
    var_log_spec = np.var(log_power_spec)

    return {
        'duration': duration,
        'mean_amp': mean_amp,
        'max_amp': max_amp,
        'silence_ratio': silence_ratio,
        'mean_mel_spec': mean_mel_spec,
        'var_mel_spec': var_mel_spec,
        'mean_log_spec': mean_log_spec,
        'var_log_spec': var_log_spec,
        'mel_spec': mel_spec,
        'log_power_spec': log_power_spec
    }

# Processing function
def process_audio_folder(folder_path, output_dir, label):
    records = []

    for filename in os.listdir(folder_path):
        if filename.endswith('.flac'):
            audio_id = os.path.splitext(filename)[0]
            audio_path = os.path.join(folder_path, filename)

            if not os.path.exists(audio_path):
                print(f"Warning: {audio_path} not found. Skipping.")
                continue

            features = extract_features(audio_path)

            np.save(f'{output_dir}/{audio_id}_mel_spec.npy', features['mel_spec'])
            np.save(f'{output_dir}/{audio_id}_log_power_spec.npy', features['log_power_spec'])

            trial_id = audio_id
            speaker = eval_df.loc[trial_id, 'speaker'] if trial_id in eval_df.index else 'Unknown'
            compression_type = eval_df.loc[trial_id, 'compr'] if trial_id in eval_df.index else 'Unknown'
            source = eval_df.loc[trial_id, 'source'] if trial_id in eval_df.index else 'Unknown'
            attack = eval_df.loc[trial_id, 'attack'] if trial_id in eval_df.index else 'Unknown'

            record = {
                'Filename': filename,
                'Label': label,
                'Speaker': speaker,
                'Compression Type': compression_type,
                'Source': source,
                'Attack': attack,
                'Duration (s)': features['duration'],
                'Mean Amplitude': features['mean_amp'],
                'Max Amplitude': features['max_amp'],
                'Silence Ratio': features['silence_ratio'],
                'Mean Mel-Spec': features['mean_mel_spec'],
                'Variance Mel-Spec': features['var_mel_spec'],
                'Mean Log-Spec': features['mean_log_spec'],
                'Variance Log-Spec': features['var_log_spec']
            }
            records.append(record)

    return records

# ---- Process Real Audio ----
real_data = process_audio_folder(real_audio_dir, real_output_dir, label='Real')
real_df = pd.DataFrame(real_data)
real_report_path = os.path.join(real_output_dir, 'Real_EDA_Report_2000.xlsx')
real_df.to_excel(real_report_path, index=False)
print("Real audio feature extraction and report completed.")
files.download(real_report_path)

# ---- Process Fake Audio ----
fake_data = process_audio_folder(fake_audio_dir, fake_output_dir, label='Fake')
fake_df = pd.DataFrame(fake_data)
fake_report_path = os.path.join(fake_output_dir, 'Fake_EDA_Report_2000.xlsx')
fake_df.to_excel(fake_report_path, index=False)
print("Fake audio feature extraction and report completed.")
files.download(fake_report_path)

import pandas as pd
df = pd.read_excel('EDA_report 2.xlsx')
df.describe()

import seaborn as sns
import matplotlib.pyplot as plt

sns.histplot(df['Duration (s)'], kde=True)
plt.show()